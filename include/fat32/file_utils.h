#include <stdint.h>

#pragma once


/**
 * Проверяет корректность пути файловой системы.
 * Путь должен начинаться с '/' и состоять из сегментов,
 * разделённых '/', каждый сегмент содержит допустимые символы.
 * В конце путь может содержать сегмент с расширением.
 *
 * @param path — строка с проверяемым путём.
 * @return 0 — если путь корректен,
 *         отрицательное значение — при ошибке.
 */
int validate_path(const char *path);

/**
 * Проверяет корректность имени файла в формате FAT LFN.
 * Имя может содержать буквы, цифры, символы '_' и '-'.
 * Допускается расширение длиной до 5 символов, содержащих только буквы, цифры и '_'.
 *
 * @param name — имя файла для проверки.
 * @return 0 — если имя корректно,
 *         отрицательное значение — при ошибке.
 */
int validate_fat_lfn(const char *name);

/**
 * Проверяет корректность имени файла в формате FAT SFN.
 * Имя должно содержать только заглавные буквы (A-Z), цифры (0-9) и символ '_'.
 * Имя — до 8 символов, расширение — до 3 символов.
 * Допускается только одно расширение, разделённое точкой.
 *
 * @param name — имя файла для проверки.
 * @return 0 — если имя корректно,
 *         отрицательное значение — при ошибке.
 */
int validate_fat_sfn(const char *name);

typedef enum {
     FAT_ERR_NULL = -1,          // NULL или пустой указатель
    FAT_ERR_EMPTY = -2,         // Пустое имя или сегмент
    FAT_ERR_TOO_LONG = -3,      // Сегмент или имя слишком длинное
    FAT_ERR_INVALID_CHAR = -4,  // Недопустимый символ в имени или расширении
    FAT_ERR_DOT_MULTIPLE = -5,  // Несколько точек в имени
    FAT_ERR_EXT_LEN = -6,       // Недопустимая длина расширения
    FAT_ERR_PATH_INVALID = -60, // Ошибка формата пути
    FAT_ERR_PATH_EMPTY_SEG = -11 // Пустой сегмент пути
}fat_validate_status_t;