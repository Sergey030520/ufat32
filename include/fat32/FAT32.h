#pragma once

#include <stdint.h>
#include "block_device.h"


typedef struct
{
    MBR_Type mbr_data;
    uint32_t address_tabl1;
    uint32_t address_tabl2;
    uint32_t address_region;
    uint32_t root_cluster;
    uint32_t secPerClus;
    uint32_t fat_ents_sec;
    uint32_t bytesPerSec;
    uint32_t sizeFAT;
    BlockDevice *device;
} FatLayoutInfo;


/**
 * Монтирует файловую систему FAT32.
 *
 * Инициализирует и подготавливает к работе FAT32.
 *
 * @return 0 при успешном монтировании, отрицательное значение при ошибке.
 */
int mount_fat32(BlockDevice *device);

/**
 * Форматирует накопитель под файловую систему FAT32.
 *
 * @param capacity Емкость накопителя в байтах.
 * @return 0 при успешном форматировании, отрицательное значение при ошибке.
 */
int formatted_fat32(BlockDevice *device, uint64_t capacity);

/**
 * Выводит содержимое директории по указанному пути.
 *
 * @param path Путь к директории.
 * @return 0 при успешном выполнении, иначе код ошибки.
 */
int list_directory_fat32(const char *path);

/** 
* @brief Сохраняет изменения в структуре файла на файловой системе FAT32.
 *
 * Обновляет метаданные файла, включая размер и время последней модификации,
 * и записывает обновлённую запись каталога на носитель.
 * Используется для синхронизации состояния файлового дескриптора с физическим уровнем.
 *
 * @param file Указатель на структуру FAT32_File, описывающую открытый файл.
 * @return 0 при успешном выполнении, иначе код ошибки.
 */

int flush_fat32(FAT32_File *file);

/**
 * Создаёт новую директорию в файловой системе FAT32.
 *
 * @param path Путь к создаваемой директории.
 * @return 0 при успешном создании, отрицательное значение при ошибке.
 */
int mkdir_fat32(char *path);

/**
 * Перемещает текущую позицию указателя чтения/записи в файле FAT32.
 *
 * Позволяет задать новую позицию относительно начала, конца или текущего положения.
 *
 * @param file Указатель на файл FAT32.
 * @param offset Смещение в байтах.
 * @param mode Режим смещения: SEEK_SET (от начала), SEEK_CUR (от текущей), SEEK_END (от конца).
 * @return 0 при успехе,
 *         FAT_ERR_INVALID_ARGUMENT если передан некорректный режим,
 *         FAT_ERR_INVALID_SEEK_MODE если передан неизвестный режим смещения, 
 *         FAT_ERR_INVALID_POSITION если позиция выходит за границы файла,
 *         FAT_ERR_CLUSTER_CHAIN_BROKEN если цепочка кластеров файла нарушена,
 *         другие коды ошибок при внутренних ошибках.
 */
int seek_file_fat32(FAT32_File *file, int32_t offset, SEEK_Mode mode);

/**
 * Открывает файл в файловой системе FAT32.
 *
 * Если файл не существует и установлен соответствующий режим, он может быть создан.
 *
 * @param path Путь к файлу.
 * @param file Указатель на указатель, куда будет сохранена структура открытого файла.
 * @param mode Режим открытия (например, чтение, запись, создание и т.д.).
 * @return 0 при успешном открытии, отрицательное значение при ошибке.
 */
int open_file_fat32(char *path, FAT32_File **file, uint8_t mode);

/**
 * Закрывает ранее открытый файл FAT32.
 *
 * Все несохранённые данные будут записаны в файловую систему.
 *
 * @param file Указатель на структуру файла, подлежащего закрытию.
 * @return 0 при успешном закрытии, отрицательное значение при ошибке.
 */
int close_file_fat32(FAT32_File **file);

/**
 * Возвращает текущую позицию указателя чтения/записи в файле FAT32.
 *
 * Используется для определения смещения от начала файла, на котором находится курсор.
 *
 * @param file Указатель на открытую структуру файла FAT32.
 * @return Текущее смещение в байтах от начала файла.
 */
uint32_t tell_fat32(FAT32_File *file);

/**
 * Ищет директорию по указанному пути в файловой системе FAT32.
 *
 * Возвращает кластер, соответствующий найденной директории, если путь корректен.
 *
 * @param path Путь к директории (например, "/folder/subfolder").
 * @param out_cluster Указатель на переменную, в которую будет записан номер кластера директории.
 * @return 0 при успешном поиске, отрицательное значение при ошибке (например, директория не найдена).
 */
int find_directory_fat32(char *path, uint32_t *out_cluster);

int get_dir_path(char *file_path, char *dir_path, int size);

/**
 * Удаляет файл по указанному пути из файловой системы FAT32.
 *
 * Файл удаляется из записи каталога, а его кластеры помечаются как свободные.
 *
 * @param path Полный путь к файлу (например, "/folder/file.txt").
 * @return 0 при успешном удалении, отрицательное значение при ошибке (например, файл не найден).
 */
int delete_file_fat32(char *path);

/**
 * Удаляет папку по указанному пути из файловой системы FAT32.
 *
 * Папка удаляется из записи каталога, а его кластеры помечаются как свободные.
 *
 * @param path Полный путь к файлу (например, "/folder/remove_folder").
 * @return 0 при успешном удалении, отрицательное значение при ошибке (например, файл не найден).
 */
int delete_dir_fat32(char *path, DeleteDirMode mode);

/**
 * Проверяет существование указанного пути в файловой системе FAT32.
 *
 * Может использоваться для проверки наличия файла или директории.
 *
 * @param path Полный путь (например, "/folder/file.txt" или "/folder").
 * @return 0 если путь существует, 1 если не существует.
 */
int path_exists_fat32(char *path);

/**
 * Читает данные из файла FAT32.
 *
 * Считывает указанное количество байт из текущей позиции файла в буфер.
 * После чтения позиция смещается на количество прочитанных байт.
 *
 * @param file Указатель на открытый файл FAT32.
 * @param buffer Буфер для хранения считанных данных.
 * @param size Количество байт для чтения.
 * @return Количество фактически прочитанных байт или отрицательное значение при ошибке.
 */
int read_file_fat32(FAT32_File *file, uint8_t *buffer, const uint32_t size);

/**
 * Записывает данные в файл FAT32.
 *
 * @param file    Указатель на структуру FAT32_File, описывающую открытый файл.
 * @param buffer  Буфер с данными, которые нужно записать.
 * @param length  Количество байт для записи.
 *
 * @return Количество успешно записанных байт, либо код ошибки (< 0).
 */
int write_file_fat32(FAT32_File *file, uint8_t *buffer, uint32_t length);

/**
 * @brief Очищает таблицы FAT (File Allocation Table) в файловой системе FAT32.
 *
 * Эта функция обнуляет все записи в основной и резервной FAT-таблицах, кроме первых 4-х байт (резервных),
 * тем самым удаляя всю информацию о распределении кластеров. Используется при форматировании или полной очистке данных.
 *
 * @return 0 при успехе, или код ошибки:
 *         - FAT_ERR_FS_NOT_LOADED — если файловая система не загружена
 *         - POOL_ERR_ALLOCATION_FAILED — ошибка выделения буфера
 *         - FAT_ERR_READ_FAIL — ошибка чтения с SD-карты
 */
int clear_table_fat32();

// test

int show_entry_fat32(uint32_t sector);
void clear_fat32();
int show_table_fat32(uint32_t sector);