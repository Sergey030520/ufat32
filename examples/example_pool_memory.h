#include <stdint.h>

#pragma once


typedef enum {
    
    POOL_ERR_NONE = -1,
    POOL_ERR_OUT_OF_MEMORY = -2,
    POOL_ERR_INVALID_POINTER = -3,
    POOL_ERR_POINTER_OUT_OF_RANGE = -4,
    POOL_ERR_ALLOCATION_FAILED = -5, // Выделение памяти не удалось
    POOL_ERR_INVALID_ARGUMENT = -6,
    POOL_ERR_FREE_FAILED = -7 // Ошибка освобождения памяти
}PoolError;

/**
 * Инициализирует пул памяти.
 *
 * Подготавливает внутренние структуры для работы аллокатора: очищает карту битов,
 * сбрасывает указатель последнего свободного блока и помечает пул как инициализированный.
 * Функцию необходимо вызвать перед первым использованием `pool_alloc` или `pool_free_region`.
 */
void pool_init();

/**
 * Выделяет блок памяти заданного размера из пула.
 *
 * @param size Количество байт для выделения.
 * @return Указатель на выделенный блок или NULL, если памяти недостаточно.
 */
void *pool_alloc(uint32_t size);

/**
 * Освобождает всю память пула.
 *
 * Сбрасывает внутреннее состояние пула, помечая всю память как свободную.
 */
void pool_free();


/**
 * Освобождает конкретный регион памяти в пуле.
 *
 * @param ptr Указатель на начало региона, который нужно освободить.
 * @param size Размер региона в байтах.
 * @return 0 при успешном освобождении, отрицательное значение при ошибке (например, неверный указатель или размер).
 */
int pool_free_region(void *ptr, uint32_t size);